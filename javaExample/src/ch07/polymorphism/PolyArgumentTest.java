package ch07.polymorphism;

public class PolyArgumentTest {

	public static void main(String[] args) {
		Buyer b = new Buyer();
		
		// 다 같은 주소를 소유하기 위해 만들었음
		Tv tv = new Tv();
		Computer com = new Computer();
		Audio aud = new Audio();
		
		// case 1 : Tv
		b.buy(tv); // Tv(자)클래스는 Product(부)를 상속받음, 상속인 상태에서는 형변환 가능
						 // 부모 > 자식 -> 작은 거에서 큰 걸로 가서 OK
		                 // 다형성? 부모타입의 참조변수로 여러 타입의 객체를 잠조할 수 있음(자식)
						 // 매개변수의 다형성? 참조형 매개변수는 메서드 호출시, 자신과 같은 타입 또는 
						 // 자손 타입의 인스턴스를 넘겨줄 수 있음! => b.buy(new Tv());

		
		//------------------------------------------------------
		// case 2 : Computer
		b.buy(com);
		
		//------------------------------------------------------
		// case 3 : Audio
		b.buy(aud);
		
		//------------------------------------------------------
		// [배열]
		b.summary();
		b.refund(com); 
		
		//------------------------------------------------------
		
		//System.out.println("현재 남은 돈은 " + b.money +"만원 입니다.");
		//System.out.println("현재 보너스 점수는 " + b.bonusPoint + "점 입니다.");
		
		//------------------------------------------------------
		
		// 생성자 초기화 3가지 방법
		
		//Tv t1 = new Tv();
//		tv.price=100; // 상속받았기때문에 price 사용 가능
//		              // 1.명시적 초기화
		
		// 2.생성자를 이용한 초기화는 Tv() 괄호안에 값 바로 넣기
		// 매개변수가 없는 것이 기본 생성자인데, 현재는 기본 생성자만 생성되어있음
		// 값을 넣었다? int price가 들어간 생성자가 필요!
		
		// 3.super() 이용
		// 부모 클래스의 생성자를 호출하는 것임
		// 자식 클래스의 기본생성자에 super() 작성,
		// 부모 클래스에 매개변수 갯수와 동일해야함

	}

}
